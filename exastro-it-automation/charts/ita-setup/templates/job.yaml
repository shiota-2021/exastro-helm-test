apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "ita-setup.name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ita-setup.labels" . | nindent 4 }}
spec:
  completions: {{ .Values.completionCount }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "ita-setup.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.database.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "ita-setup.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      restartPolicy: "OnFailure"
      initContainers:
        - name: remove-data
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.initContainerImage.repository }}:{{ .Values.initContainerImage.tag | default "latest" }}"
          imagePullPolicy: {{ .Values.initContainerImage.pullPolicy }}
          command: ["sh", "-c"]
          args:
            - |
              {{- if .Values.global.itaGlobalDefinition.persistence.reinstall }}
              echo "Removing data for Exastro IT Automation persistence..."
              rm -rf {{ .Values.global.itaGlobalDefinition.config.STORAGEPATH }}/*
              {{- else }}
              echo "Leave data for Exastro IT Automation persistence."
              {{- end }}
          volumeMounts:
            - name: volume-{{ template "ita-setup.name" . }}-storage
              mountPath: {{ .Values.global.itaGlobalDefinition.config.STORAGEPATH }}
        - name: database-alive-check
          securityContext:
            {{- toYaml .Values.database.securityContext | nindent 12 }}
          image: "{{ .Values.database.initContainerImage.repository }}:{{ .Values.database.initContainerImage.tag | default "latest" }}"
          imagePullPolicy: {{ .Values.database.image.pullPolicy }}
          command: ["sh", "-c"]
          args:
            - |
              {{- .Values.database.livenessCheck | nindent 14 }}
          env:
            {{- range $define := .Values.global -}}
            {{-   range $config, $value := $define.config }}
            {{-     if or (eq $define.name "ita-global") (eq $define.name "ita-database") }}
            - name: {{ $config }}
              valueFrom:
                configMapKeyRef:
                  name: ita-params-{{ $define.name }}
                  key: {{ $config }}
            {{-     end -}}
            {{-   end -}}
            {{-   range $secret, $value := $define.secret }}
            {{-     if or (eq $define.name "ita-database") }}
            - name: {{ $secret }}
              valueFrom:
                secretKeyRef:
                  name: ita-secret-{{ $define.name }}
                  key: {{ $secret }}
            {{-     end }}
            {{-   end }}
            {{- end -}}
            {{ range $config, $value := .Values.extraEnv }}
            - name: {{ $config }}
              valueFrom:
                configMapKeyRef:
                  name: params-{{ template "ita-setup.name" $ }}
                  key: {{ $config }}
            {{- end }}
        - name: db-initialize
          securityContext:
            {{- toYaml .Values.database.securityContext | nindent 12 }}
          image: "{{ .Values.database.image.repository }}:{{ .Values.database.image.tag | default "latest" }}"
          imagePullPolicy: {{ .Values.database.image.pullPolicy }}
          command: ["sh", "-c"]
          args:
            - |
              {{- .Values.database.initializeDatabase | nindent 14 }}
          env:
            {{- range $define := .Values.global -}}
            {{-   range $config, $value := $define.config }}
            {{-     if or (eq $define.name "ita-global") (eq $define.name "gitlab") (eq $define.name "ita-database") }}
            - name: {{ $config }}
              valueFrom:
                configMapKeyRef:
                  name: ita-params-{{ $define.name }}
                  key: {{ $config }}
            {{-     end -}}
            {{-   end -}}
            {{-   range $secret, $value := $define.secret }}
            {{-     if or (eq $define.name "gitlab") (eq $define.name "ita-database") }}
            - name: {{ $secret }}
              valueFrom:
                secretKeyRef:
                  name: ita-secret-{{ $define.name }}
                  key: {{ $secret }}
            {{-     end }}
            {{-   end }}
            {{- end -}}
            {{ range $config, $value := .Values.extraEnv }}
            - name: {{ $config }}
              valueFrom:
                configMapKeyRef:
                  name: params-{{ template "ita-setup.name" $ }}
                  key: {{ $config }}
            {{- end }}
          volumeMounts:
            - name: mysql-server-initdb
              mountPath: {{ .Values.volumeMounts.mountPath.createDB.path }}
              subPath: {{ .Values.volumeMounts.mountPath.createDB.subPath }}
            - name: mysql-server-conf
              mountPath: {{ .Values.volumeMounts.mountPath.conf.path }}
      containers: # we can have one or more containers
        - name: completion
          image: busybox
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c"]
          args:
            - |
              echo "Installation completed!!"
      volumes:
        - name: volume-{{ template "ita-setup.name" . }}-storage
          {{- if and .Values.global.itaGlobalDefinition.persistence.enabled }}
          persistentVolumeClaim:
            claimName: pvc-{{ .Values.global.itaGlobalDefinition.name }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: mysql-server-initdb
          configMap:
            name: ita-createdb-sql
            items:
            - key: {{ .Values.volumeMounts.mountPath.createDB.subPath }}
              path: {{ .Values.volumeMounts.mountPath.createDB.subPath }}
              mode: 0644
        - name: mysql-server-conf
          configMap:
            name: ita-mysqld-conf